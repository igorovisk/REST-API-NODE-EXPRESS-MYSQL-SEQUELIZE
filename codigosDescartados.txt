const criaUsuario = async function (req, res) {
    try {
        //Destruct da requisição
        // const { habilidades, ...data } = req.body
        const data = req.body

        //Validação dos campos da requisição pelo JOI VALIDATOR
        const usuarioValido = await usuarioSchema.validate(req.body)
        if (usuarioValido.error) throw new Error(usuarioValido.error)

        //VERIFICA SE HABILIDADE EXISTE
        // const verificaHabilidade = await Habilidades.findAll({
        //     where: { id: req.body.habilidades },
        // })

        // if (verificaHabilidade.length == 0)
        //     throw new Error(
        //         "Id de alguma habilidade é inexistente, favor verificar dados..."
        //     )

        //VERIFICA SE JÁ EXISTE CADASTRO DE LOGIN, CPF E EMAIL EXISTENTES NO BANCO DE DADOS:
        const verificaSeExisteNoSistema = await Usuarios.findOne({
            where: {
                [Op.or]: [
                    { email: { [Op.eq]: data.email } },
                    { login: { [Op.eq]: data.login } },
                    { cpf: { [Op.eq]: data.cpf } },
                ],
            },
        })

        if (verificaSeExisteNoSistema?.dataValues.cpf == data.cpf)
            throw new Error("CPF já cadastrado")
        if (verificaSeExisteNoSistema?.dataValues.login == data.login)
            throw new Error("Login já cadastrado")
        if (verificaSeExisteNoSistema?.dataValues.email == data.email)
            throw new Error("Email já cadastrado")

        // EFETIVA O CADASTRO APÓS PASSAR PELAS LINHAS ACIMA SEM ERRO:
        if (usuarioValido) {
            //CRIPTOGRAFA PASSWORD
            const hashedPassword = await bcrypt.hash(data.password, 10)

            // FINALMENTE CRIA O USUARIO APÓS AS VALIDAÇÕES
            const newUsuario = await Usuarios.create({
                nome: data.nome,
                cpf: data.cpf,
                login: data.login,
                password: hashedPassword,
                dataDeNascimento: data.dataDeNascimento,
                resetPassword: data.resetPassword,
                email: data.email,
                isAdm: data.isAdm,
            })
            // newUsuario.setHabilidades(habilidades)
            console.log("DATA")
            console.log(data)

            return res.status(200).json({
                message: "Usuario cadastrado com sucesso:",
                usuariocriado: newUsuario,
                // habilidades,
            })
        }
    } catch (erro) {
        console.log(erro)
        return res.status(400).json({
            message: `Ocorreu um erro.. ${erro}`,
        })
    }
}
